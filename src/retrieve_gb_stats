#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import time
import datetime
import requests
from selenium import webdriver
from optparse import OptionParser


ARGS = [
    {
        'val': '--start-date',
        'dest': 'start_date',
        'action': 'store',
        'help': 'beginning of date range, as YYYY-mm-dd'
    }, {
        'val': '--end-date',
        'dest': 'end_date',
        'action': 'store',
        'help': 'end of date range, as YYYY-mm-dd'
    }, {
        'val': '--user-agent',
        'dest': 'user_agent',
        'action': 'store',
        'help': 'User agent used by webdriver'
    }, {
        'val': '--user',
        'dest': 'user',
        'action': 'store',
        'help': 'Google user email address'
    }, {
        'val': '--password',
        'dest': 'password',
        'action': 'store',
        'help': 'Google user password'
    }, {
        'val': '--account',
        'dest': 'gb_account',
        'action': 'store',
        'help': 'Google Books account number'
    }
]
CONTENT_TYPE = 'text/csv; charset=utf-16le'
REPORT_HEADERS = ('"Primary ISBN"\t"Title"\t"Book Visits (BV)"\t"BV with ' +
                  'Pages Viewed"\t"Non-Unique Buy Clicks"\t"BV with Buy ' +
                  'Clicks"\t"Buy Link CTR"\t"Pages Viewed"')


def initialize_service(user, password, user_agent):
    login_url = "https://accounts.google.com/ServiceLogin"
    args = {'phantomjs.page.settings.userAgent': user_agent}
    driver = webdriver.PhantomJS(desired_capabilities=args)
    driver.get(login_url)
    driver.find_element_by_id("Email").send_keys(user)
    driver.find_element_by_id("next").click()
    time.sleep(3)
    driver.find_element_by_name("Passwd").send_keys(password)
    driver.find_element_by_id("signIn").click()
    time.sleep(4)
    return driver


def build_report_url(gb_account, start_date, end_date):
    fmt = '%Y,%-m,%-d'
    start = datetime.datetime.strptime(start_date, '%Y-%m-%d').strftime(fmt)
    end = datetime.datetime.strptime(end_date, '%Y-%m-%d').strftime(fmt)
    url = ("https://play.google.com/books/publish/a/%s/downloadTrafficReport" +
           "?f.req=[[null,%s],[null,%s],2]&hl=en-US&token=")
    return url % (gb_account, start, end)


def get_report(report_url, user_agent, cookies):
    headers = {'user-agent': user_agent}
    res = requests.get(report_url, headers=headers, cookies=cookies)
    if not res.status_code == 200 \
       or not res.headers['content-type'] == CONTENT_TYPE:
        # These are not the reports we're looking for
        raise ValueError(res.text)
    return res.content


def print_gb_csv(gb_account, user, password, user_agent, start_date, end_date):
    service = initialize_service(user, password, user_agent)
    cookies = service.get_cookies()
    report_url = build_report_url(gb_account, start_date, end_date)

    try:
        results = get_report(report_url, user_agent, cookies)
        report = results.decode('utf-16')
    except (UnicodeDecodeError, ValueError):
        msg = ('Failed to retrieve report %s-%s.' +
               'This is likely to be caused by an authentication issue\n')
        sys.stderr.write(msg % (start_date, end_date))
        sys.exit(1)
    finally:
        service.close()

    try:
        assert report.strip() != REPORT_HEADERS and report.strip()
        print(report)
    except AssertionError:
        pass


def get_options(args):
    parser = OptionParser()
    for arg in args:
        parser.add_option(arg['val'], dest=arg['dest'],
                          action=arg['action'], help=arg['help'])
    options, rest = parser.parse_args()

    assert rest == []
    assert options.user and options.password and options.user_agent \
        and options.gb_account and options.start_date and options.end_date
    return options


def run():
    options = get_options(ARGS)
    print_gb_csv(options.gb_account, options.user, options.password,
                 options.user_agent, options.start_date, options.end_date)


if __name__ == '__main__':
    run()
